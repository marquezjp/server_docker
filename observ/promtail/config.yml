server:
  http_listen_port: 9080
  log_level: info

clients:
  - url: http://loki:3100/loki/api/v1/push
    # se você proteger o Loki no futuro com TLS/CA própria, ajustamos aqui

positions:
  filename: /tmp/positions.yaml

scrape_configs:
  # === Linux: /var/log ===
  - job_name: linux-varlog
    static_configs:
      - targets: [localhost]
        labels:
          job: linux-varlog
          host: ${HOSTNAME}
          __path__: /var/log/*.log

  # === Docker: containers ===
  # Lê arquivos JSON dos containers e usa docker_sd para rótulos úteis
  - job_name: docker
    pipeline_stages:
      - docker: {}    # decodifica o JSON de log padrão do Docker
    static_configs:
      - targets: [localhost]
        labels:
          job: docker
          __path__: /var/lib/docker/containers/*/*-json.log

  # (opcional, mas recomendado) Descoberta dinâmica via Docker API
  # Isto injeta labels ricas, como compose_service, container_id/names, etc.
  - job_name: docker_sd
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
    pipeline_stages:
      - docker: {}
    relabel_configs:
      # container_name legível (sem a barra inicial)
      - source_labels: ['__meta_docker_container_name']
        target_label: container_name
        regex: '/(.*)'
      # serviço do docker-compose, se existir
      - source_labels: ['__meta_docker_container_label_com_docker_compose_service']
        target_label: compose_service
      # stack do compose, se existir
      - source_labels: ['__meta_docker_container_label_com_docker_compose_project']
        target_label: compose_project
      # imagem e stream
      - source_labels: ['__meta_docker_container_image']
        target_label: image
      - source_labels: ['__meta_docker_container_log_stream']
        target_label: stream
      # job consistente
      - target_label: job
        replacement: docker
